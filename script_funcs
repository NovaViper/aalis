#################################################
#### Color Codes
#################################################
RED='\e[31m'
GREEN='\e[32m'
LIGHT_RED='\e[91m'
LIGHT_GREEN='\e[92m'
YELLOW='\e[93m'
LIGHT_BLUE='\e[94m'
LIGHT_PURPLE='\e[95m'
WHITE='\e[97m'
NC='\e[39m' # No Color

#################################################
#### Functions to be used across the main scripts
#################################################
function installPac(){
	pacman -S --needed --noconfirm $1
}

function installPacSoft(){
	pacman -S --needed $1
}

function removePac(){
	pacman -R --noconfirm $1
}

function installYay(){
	yay -S --needed --noconfirm --batchinstall $1
}

function installYaySoft(){
	yay -S --needed $1
}

# Parameters:
#   $1:     Color code
#   $2:     String to output
function output(){
	echo -e "${1}${2}${NC}"
}

# Found this function on Unix StackExchange (https://unix.stackexchange.com/a/70616/502849 by manatwork), modded it to create a centered banner made of - without edges and optional second color for text
# Parameters
#   $1:     First color
#   $2:     Second color (optional)
#   $3...:  String text, can be multiple string argumnts for each line
#
# Example:
#   Single line banners are generated like `banner ${COLOR} ${OPTIONAL_SECONDCOLOR} "first line"``
#   Multi line banners are generated like `banner ${COLOR} ${OPTIONAL_SECONDCOLOR} "first line" "second line" "third line"`
function banner() {
	local s=("${@:3}") b w
	local second_color=$2
	if [[ ! "$second_color" =~ "\e[".* ]]; then #If the second color isn't declared, then make the function use only the first color declared
		local s=("${@:2}") b w
		local second_color=$1
	fi

	for l in "${s[@]}"; do
		((w<${#l})) && { b="         $l         "; w="${#l}"; }
	done
	echo -ne $1
	echo "-${b//?/-}-"
	for l in "${s[@]}"; do
		printf '         %s%*s%s         \n' "$(echo -ne $second_color)" "-$w" "$l" "$(echo -ne $1)"
	done
	echo -e "-${b//?/-}-${NC}"
}

# Ask a yes/no question
# Parameters
#   $1:     Optional color code to change the output's color
#   $2:     The question to be outputted
#
# Example:
# With color speified: `askYesNo ${LIGHT_GREEN} "Some question here"`
# Without color speified: `askYesNo "Some question here"`
function askYesNo() {
	local s=("${@:2}")
	local color=$1
	if [[ ! "$color" =~ "\e[".* ]]; then #If the color isn't declared, then make the function use the $YELLOW color and use $1 as the question string
		local s=("${@:1}")
		local color=${YELLOW}
	fi
	while true; do
		read -p "$(output $color "$s ([Y]es or [N]o): ")" REPLY
		case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
			y|yes|Y|YES|Yes) echo "yes" ; break;;
			n|no|N|NO|No)    echo "no" ; break;;
		esac
	done
}

###################################################################################
# Answer from https://stackoverflow.com/a/49351294/17812185 by Maxxim
# Compare two version strings [$1: version string 1 (v1), $2: version string 2 (v2)]
# Return values:
#   0: v1 == v2
#   1: v1 > v2
#   2: v1 < v2
# Based on: https://stackoverflow.com/a/4025065 by Dennis Williamson
function compare_versions() {

	# Trivial v1 == v2 test based on string comparison
	[[ "$1" == "$2" ]] && return 0

	# Local variables
	local regex="^(.*)-rc([0-9]*)$" va1=() vr1=0 va2=() vr2=0 len i IFS="."

	# Split version strings into arrays, extract trailing revisions
	if [[ "$1" =~ ${regex} ]]; then
		va1=(${BASH_REMATCH[1]})
		[[ -n "${BASH_REMATCH[2]}" ]] && vr1=${BASH_REMATCH[2]}
	else
		va1=($1)
	fi
	if [[ "$2" =~ ${regex} ]]; then
		va2=(${BASH_REMATCH[1]})
		[[ -n "${BASH_REMATCH[2]}" ]] && vr2=${BASH_REMATCH[2]}
	else
		va2=($2)
	fi

	# Bring va1 and va2 to same length by filling empty fields with zeros
	(( ${#va1[@]} > ${#va2[@]} )) && len=${#va1[@]} || len=${#va2[@]}
	for ((i=0; i < len; ++i)); do
		[[ -z "${va1[i]}" ]] && va1[i]="0"
		[[ -z "${va2[i]}" ]] && va2[i]="0"
	done

	# Append revisions, increment length
	va1+=($vr1)
	va2+=($vr2)
	len=$((len+1))

	# *** DEBUG ***
	#echo "TEST: '${va1[@]} (?) ${va2[@]}'"

	# Compare version elements, check if v1 > v2 or v1 < v2
	for ((i=0; i < len; ++i)); do
		if (( 10#${va1[i]} > 10#${va2[i]} )); then
			return 1
		elif (( 10#${va1[i]} < 10#${va2[i]} )); then
			return 2
		fi
	done

	# All elements are equal, thus v1 == v2
	return 0
}

# Test compare_versions [$1: version string 1, $2: version string 2, $3: expected result]
function test_compare_versions() {
	compare_versions "$1" "$2"
	case $? in
		0) op="==" ;;
		1) op=">" ;;
		2) op="<" ;;
	esac

	if [[ "$op" == "==" ]]; then
		output ${LIGHT_GREEN} "The script is update to date!"
	elif [[ "$op" == "<" ]]; then
		output ${RED} "The script is out of date; the latest version is v${2}! The script will continue on, however it is recommended that you update the script!"
	elif [[ "$op" == ">" ]]; then
		output ${YELLOW} "The script is ahead of the release version, so this must be a release canidate or a beta build!"
	else
		banner ${RED} "SOMETHING HAS GONE WRONG, PLEASE REPORT THIS ERROR TO THE PROJECT'S GITLAB"
	fi
}
###################################################################################

# Create filesystems on the specified disk based on what boot mode is specified
# Parameters
#   $1:     the boot mode
#   $2:     the disk's name
function makeFilesystems(){

	banner ${LIGHT_PURPLE} "Setting up Filesystems..."
	if [[ "${1}" =~ "nvme" ]]; then # If the boot drive is an NVMe drive
		output ${YELLOW} "Disabling autodefrag for btrfs"
		no_defrag="yes" # don't use autodefrag for btrfs parttions
		BOOT_BIOS_DRIVE_PARTITION="${1}p1"
		BOOT_EFI_DRIVE_PARTITION="${1}p2"
		ROOT_DRIVE_PARTITION="${1}p3"
	else
		DISK_NAME=$(sed 's|/dev/||g' <(echo ${1}))
		if [[ $(cat /sys/block/${DISK_NAME}/queue/rotational) == 0 ]]; then # If the device uses rotation, if it returns 0, then it has to be an SSD (or a VM) since SSDs (or VMs) do not rotate, so make it not use autodefrag
			output ${YELLOW} "Disabling autodefrag for btrfs"
			no_defrag="yes"
		fi
		BOOT_BIOS_DRIVE_PARTITION="${1}1"
		BOOT_EFI_DRIVE_PARTITION="${1}2"
		ROOT_DRIVE_PARTITION="${1}3"
	fi

	#save drive name
	export boot_drive_name="${1}"

	# Create the filesystems
	if [[ "$boot_mode" = "uefi" ]]; then
		output ${YELLOW} "Creating Boot/EFI Filesystems for UEFI mode..."
		mkfs.vfat -F32 -n EFI ${BOOT_EFI_DRIVE_PARTITION} # Create boot filesystem for /boot
		mkfs.ext2 -L BOOT ${BOOT_BIOS_DRIVE_PARTITION}
	fi

	# If the user wants to use disk encryption, then create the luks partition map and use that instead of the disk
	if [[ "$use_crypt" = "yes"  ]]; then
		output ${YELLOW} "Encrypting Root Partition..."
		cryptsetup -y -v luksFormat --type luks1 ${ROOT_DRIVE_PARTITION}
		cryptsetup open ${ROOT_DRIVE_PARTITION} cryptroot
		export root_drive_uuid=$(blkid -s UUID -o value ${ROOT_DRIVE_PARTITION})
		ROOT_DRIVE_PARTITION="/dev/mapper/cryptroot"
	fi

	while true; do
		read -p "$(output ${YELLOW} "What filesystem do you want to use? Ext4, BTRFS: ")"
		case $(echo $REPLY | tr '[A-Z]' '[a-z]') in
			EXT4 | ext4)
				banner ${LIGHT_PURPLE} "Setting up EXT4 filesystems"
				mkfs.ext4 -L ROOT ${ROOT_DRIVE_PARTITION}

				output ${YELLOW} "Mounting root directories"
				mount ${ROOT_DRIVE_PARTITION} /mnt

				if [[ "$use_swap" = "yes"  ]]; then
					output ${YELLOW} "Lets make the swapfile!"
					mkdir -p /mnt/swap
					touch /mnt/swap/swapfile
					dd if=/dev/zero of=/mnt/swap/swapfile bs=1M count=$((RAM_MB*2)) status=progress
					chmod 600 /mnt/swap/swapfile
					mkswap /mnt/swap/swapfile
				fi
				break;;
			BTRFS | btrfs)
				banner ${LIGHT_PURPLE} "Setting up BTRFS filesystems"
				use_btrfs="yes"
				mkfs.btrfs -L ROOT ${ROOT_DRIVE_PARTITION} -f
				mount ${ROOT_DRIVE_PARTITION} /mnt
				btrfs subvolume create /mnt/@
				btrfs subvolume create /mnt/@home
				btrfs subvolume create /mnt/@cache
				btrfs subvolume create /mnt/@log
				if [[ "$use_swap" = "yes"  ]]; then btrfs subvolume create /mnt/@swap; fi

				# Unmount /mnt so we can start mounting the btrfs subvolumes
				umount /mnt

				output ${YELLOW} "Mounting root directories"
				if [[ "$no_defrag" == "yes" ]]; then
					mount -o defaults,noatime,compress=zstd,subvol=@ ${ROOT_DRIVE_PARTITION} /mnt
				else
					mount -o defaults,noatime,autodefrag,compress=zstd,subvol=@ ${ROOT_DRIVE_PARTITION} /mnt
				fi

				#Make paths for mounts
				mkdir -p /mnt/{home,var}
				mkdir -p /mnt/var/{cache,log}

				#Mount Every other partition
				if [[ "$no_defrag" == "yes" ]]; then
					mount -o defaults,noatime,compress=zstd,subvol=@home ${ROOT_DRIVE_PARTITION} /mnt/home
					mount -o defaults,noatime,compress=zstd,subvol=@cache ${ROOT_DRIVE_PARTITION} /mnt/var/cache
					mount -o defaults,noatime,compress=zstd,subvol=@log ${ROOT_DRIVE_PARTITION} /mnt/var/log
				else
					mount -o defaults,noatime,autodefrag,compress=zstd,subvol=@home ${ROOT_DRIVE_PARTITION} /mnt/home
					mount -o defaults,noatime,autodefrag,compress=zstd,subvol=@cache ${ROOT_DRIVE_PARTITION} /mnt/var/cache
					mount -o defaults,noatime,autodefrag,compress=zstd,subvol=@log ${ROOT_DRIVE_PARTITION} /mnt/var/log
				fi

				if [[ "$use_swap" = "yes"  ]]; then
					output ${YELLOW} "Lets make the swapfile!"
					mkdir -p /mnt/swap
					mount -o defaults,noatime,subvol=@swap ${ROOT_DRIVE_PARTITION} /mnt/swap
					truncate -s 0 /mnt/swap/swapfile
					chattr +C /mnt/swap/swapfile
					btrfs property set /mnt/swap/swapfile compression none
					dd if=/dev/zero of=/mnt/swap/swapfile bs=1M count=$((RAM_MB*2)) status=progress
					chmod 600 /mnt/swap/swapfile
					mkswap /mnt/swap/swapfile
				fi
				break;;
			*) output ${LIGHT_RED} "Invalid input";;
		esac
	done

	# Create boot file systems
	if [[ "$boot_mode" = "uefi" ]]; then
		output ${YELLOW} "Creating Boot Partitions for UEFI"
		mkdir -p /mnt/boot
		mount ${BOOT_BIOS_DRIVE_PARTITION} /mnt/boot
		mkdir -p /mnt/boot/efi
		mount ${BOOT_EFI_DRIVE_PARTITION} /mnt/boot/efi
	fi
	output ${LIGHT_GREEN} "Done creating the filesystems!"
}

createPassword(){
	while true; do
		read -s -p "$(output ${YELLOW} "Create a new password for $1: ")" password
		echo
		read -s -p "$(output ${YELLOW} "Enter the password (again): ")" password2
		echo
		if [[ -z "$password" ]]; then
			if [[ "yes" == $(askYesNo ${LIGHT_RED} "$2")  ]]; then
				if [[ "yes" == $(askYesNo ${LIGHT_RED} "$3") ]]; then
					break 2
				else
					continue
				fi
			else
				continue
			fi
		fi
		[ "$password" = "$password2" ] && break
		output ${LIGHT_RED} "Please try again"
	done
}

addRootPass(){
	createPassword "the root user" "THIS IS AN EXTREME SECURITY RISK AS ANYONE CAN AND WILL MODIFY YOUR SYSTEM AT ANY TIME! Do you accept the consequences?" "Are you REALLY sure? IT IS HIGHLY RECOMMENDED NOT TO DO THIS FOR THE ROOT USER!"
	output ${YELLOW} "Adding password for root user..."
	#echo "DEBUG: $password"
	echo "root:$password" | chpasswd
}

addUserPass(){
	while true; do
		read -p "$(output ${YELLOW} "Please enter a name for the new user: ")" username
		if [[ ! "${users[*]}" == "$username" ]] && [[ ! -z "${username}" ]] && [[ ! "${username}" == "root" ]]; then
			break
		elif [[ "$username" == "root" ]]; then
			output ${LIGHT_RED} "You cannot create a user with the name root, as it is reserved for the admin account. Please try a different username."
			continue
		elif [[ "${users[*]}" == "$username" ]] && [[ ! -z "${username}" ]]; then
			output ${LIGHT_RED} "You already entered this username, please enter a new username!"
			continue
		elif [[ -z "${username}" ]]; then
			output ${LIGHT_RED} "The username cannot be blank. Please try again."
			continue
		fi
	done
	createPassword "$username" "This is a security risk and allows anyone to get into your machine! Do you accept the consequences?" "Are you REALLY sure?"

	output ${YELLOW} "Creating $username..."
	useradd -m -G wheel $username
	users+=("$username")
	#echo "DEBUG: ${users[@]}"
	echo "$username:$password" | chpasswd
}

function getSubvolInfo() {
	# If the system can find the root subvolume with btrfs show, AND find both its name and ID
	if name=$(LC_ALL=C btrfs sub show / | LC_ALL=C grep -aPom1 '^\s*Name:\s*\K\S.*') && id=$(LC_ALL=C btrfs sub show / | LC_ALL=C grep -aPom1 '^\s*Subvolume ID:\s*\K\d+$')
	then # Then we save the values for later use and continue
		rootsubvol_name=${name}
		rootsubvol_id=${id}
	else
		output ${LIGHT_RED} "Can't determine name and/or id" >&2
		sleep 2
		exit 1;
	fi
}
